<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2017\community\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="15.0">
 <Targets>
  <Target Name="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\bin\Debug\Microsoft.ResourceManagement.Client.dll">
   <Modules>
    <Module Name="microsoft.resourcemanagement.client.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'Microsoft.ResourceManagement.Client.dll' with a strong name key.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Microsoft.ResourceManagement.Client">
       <Types>
        <Type Name="ClientBaseExtension" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#CallChannelMethod`1(System.ServiceModel.ClientBase`1&lt;!!0&gt;,System.Func`2&lt;!!0,System.ServiceModel.Channels.Message&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="Utils.cs" Line="27">'channel', a variable, is cast to type 'IDisposable' multiple times in method 'ClientBaseExtension.CallChannelMethod&lt;TChannel&gt;(this ClientBase&lt;TChannel&gt;, Func&lt;TChannel, Message&gt;)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ClientHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="CriticalWarning">Because type 'ClientHelper' contains only 'static' ('Shared' in Visual Basic) members, mark it as 'sealed' ('NotInheritable' in Visual Basic) to prevent consumers from inheriting from it.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddImdaHeaders(Microsoft.ResourceManagement.Client.WsTransfer.ImdaRequest,System.ServiceModel.Channels.Message)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Imda" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="ClientHelper.cs" Line="53">Correct the spelling of 'Imda' in member name 'ClientHelper.AddImdaHeaders(ImdaRequest, Message)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="imda" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="ClientHelper.cs" Line="53">In method 'ClientHelper.AddImdaHeaders(ImdaRequest, Message)', correct the spelling of 'imda' in parameter name 'imdaRequest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddRmHeaders(Microsoft.ResourceManagement.Client.WsTransfer.TransferRequest,System.ServiceModel.Channels.Message)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Rm" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="ClientHelper.cs" Line="27">Correct the casing of 'Rm' in member name 'ClientHelper.AddRmHeaders(TransferRequest, Message)' by changing it to 'RM'.</Issue>
            </Message>
            <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="ClientHelper.cs" Line="27">Correct the spelling of 'Rm' in member name 'ClientHelper.AddRmHeaders(TransferRequest, Message)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="ClientHelper.cs" Line="32">In externally visible method 'ClientHelper.AddRmHeaders(TransferRequest, Message)', validate parameter 'message' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DefaultClient" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'DefaultClient' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="mex" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="75">In method 'DefaultClient.DefaultClient(string, string, string, string, string)', correct the spelling of 'mex' in parameter name 'mexConfigurationName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="ws" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="75">In method 'DefaultClient.DefaultClient(string, string, string, string, string)', correct the spelling of 'ws' in parameter name 'wsEnumerationConfigurationName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="75">In method 'DefaultClient.DefaultClient(string, string, string, string, string)', correct the spelling of 'ws' in parameter name 'wsTransferConfigurationName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="75">In method 'DefaultClient.DefaultClient(string, string, string, string, string)', correct the spelling of 'ws' in parameter name 'wsTransferFactoryConfigurationName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="alternamte" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="103">In method 'DefaultClient.DefaultClient(string, string, string, string, string, string, string, string, string, string)', correct the spelling of 'alternamte' in parameter name 'alternamteClientConfigurationAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="mex" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="103">In method 'DefaultClient.DefaultClient(string, string, string, string, string, string, string, string, string, string)', correct the spelling of 'mex' in parameter name 'mexConfigurationName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="103">In method 'DefaultClient.DefaultClient(string, string, string, string, string, string, string, string, string, string)', correct the spelling of 'mex' in parameter name 'mexEndpointAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="ws" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="103">In method 'DefaultClient.DefaultClient(string, string, string, string, string, string, string, string, string, string)', correct the spelling of 'ws' in parameter name 'wsEnumerationConfigurationName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="103">In method 'DefaultClient.DefaultClient(string, string, string, string, string, string, string, string, string, string)', correct the spelling of 'ws' in parameter name 'wsEnumerationEndpointAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="103">In method 'DefaultClient.DefaultClient(string, string, string, string, string, string, string, string, string, string)', correct the spelling of 'ws' in parameter name 'wsTransferConfigurationName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="103">In method 'DefaultClient.DefaultClient(string, string, string, string, string, string, string, string, string, string)', correct the spelling of 'ws' in parameter name 'wsTransferEndpointAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="103">In method 'DefaultClient.DefaultClient(string, string, string, string, string, string, string, string, string, string)', correct the spelling of 'ws' in parameter name 'wsTransferFactoryConfigurationName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="103">In method 'DefaultClient.DefaultClient(string, string, string, string, string, string, string, string, string, string)', correct the spelling of 'ws' in parameter name 'wsTransferFactoryEndpointAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Approve(Microsoft.ResourceManagement.ObjectModel.ResourceTypes.RmApproval,System.Boolean,System.ServiceModel.EndpointAddress,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="476">In method 'DefaultClient.Approve(RmApproval, bool, EndpointAddress, string)', call System.IDisposable.Dispose on object 'approvalClient' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Approve(Microsoft.ResourceManagement.ObjectModel.ResourceTypes.RmApproval,System.Boolean,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="433">In method 'DefaultClient.Approve(RmApproval, bool, string)', call System.IDisposable.Dispose on object 'approvalClient' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="433">In externally visible method 'DefaultClient.Approve(RmApproval, bool, string)', validate parameter 'approval' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AskQAGateQuestions(Microsoft.ResourceManagement.Client.QAGateQuestionsHandler)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="362">'DefaultClient.AskQAGateQuestions(QAGateQuestionsHandler)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="AskQAGateQuestionsHandler" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="362">Correct the spelling of the unrecognized token 'AskQAGateQuestionsHandler' in the literal '"We have encountered a QA gate but nobody has registered to present QA challenges..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="alternateClient" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="492">'DefaultClient' contains field 'DefaultClient.alternateClient' that is of IDisposable type: 'AlternateClient'. Change the Dispose method on 'DefaultClient' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="492">Modify 'DefaultClient.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleAuthNFault(System.String,System.ServiceModel.Channels.ContextMessageProperty)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="147">In method 'DefaultClient.HandleAuthNFault(string, ContextMessageProperty)', call System.IDisposable.Dispose on object 'stsClient' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="181">'DefaultClient.HandleAuthNFault(string, ContextMessageProperty)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="184">'DefaultClient.HandleAuthNFault(string, ContextMessageProperty)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="AuthChallenge" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="181">Correct the spelling of the unrecognized token 'AuthChallenge' in the literal '"The STS returned a response that is neither an AuthChallenge nor a Security Resp..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Put(Microsoft.ResourceManagement.ObjectModel.RmResourceChanges,System.Boolean,Microsoft.ResourceManagement.Client.WsTransfer.PutResponse&amp;,System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Channels.ContextMessageProperty)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="263">Consider a design that does not require that 'response' be an out parameter.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="302">'DefaultClient.Put(RmResourceChanges, bool, out PutResponse, SecurityToken, ContextMessageProperty)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="STSEndpoinAddresst" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="278">'DefaultClient.Put(RmResourceChanges, bool, out PutResponse, SecurityToken, ContextMessageProperty)' declares a variable, 'STSEndpoinAddresst', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="responseContext" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="263">'DefaultClient.Put(RmResourceChanges, bool, out PutResponse, SecurityToken, ContextMessageProperty)' declares a variable, 'responseContext', of type 'ContextMessageProperty', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="Reassigned" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="298">In externally visible method 'DefaultClient.Put(RmResourceChanges, bool, out PutResponse, SecurityToken, ContextMessageProperty)', validate local variable ''(*response)'', which was reassigned from parameter 'response', before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#questionHandler" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'DefaultClient.questionHandler' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResetPassword(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="331">In method 'DefaultClient.ResetPassword(string)', call System.IDisposable.Dispose on object 'user' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="STSEndpoint" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="337">'DefaultClient.ResetPassword(string)' declares a variable, 'STSEndpoint', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="endpoint" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultClient.cs" Line="350">'DefaultClient.ResetPassword(string)' declares a variable, 'endpoint', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DefaultResourceTypeFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateResource(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="DefaultResourceTypeFactory.cs" Line="8">'DefaultResourceTypeFactory.CreateResource(string)' has a cyclomatic complexity of 32. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RmFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Rm" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Rm' in type name 'RmFactory' by changing it to 'RM'.</Issue>
          </Message>
          <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rm' in type name 'RmFactory'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Xml.Schema.XmlSchemaSet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmFactory.cs" Line="26">In method 'RmFactory.RmFactory(XmlSchemaSet)', correct the spelling of 'rm' in parameter name 'rmSchema' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Microsoft.ResourceManagement.ObjectModel.RmAttributeName.#ctor(System.String)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmFactory.cs" Line="123">Because the behavior of 'RmAttributeName.RmAttributeName(string)' could vary based on the current user's locale settings, replace this call in 'RmFactory.RmFactory(XmlSchemaSet)' with a call to 'RmAttributeName.RmAttributeName(string, CultureInfo)'. If the result of 'RmAttributeName.RmAttributeName(string, CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmFactory.cs" Line="85">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'RmFactory.RmFactory(XmlSchemaSet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmFactory.cs" Line="118">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'RmFactory.RmFactory(XmlSchemaSet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateRmAttributeValue(Microsoft.ResourceManagement.ObjectModel.RmAttributeName)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Rm" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmFactory.cs" Line="135">Correct the casing of 'Rm' in member name 'RmFactory.CreateRmAttributeValue(RmAttributeName)' by changing it to 'RM'.</Issue>
            </Message>
            <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmFactory.cs" Line="135">Correct the spelling of 'Rm' in member name 'RmFactory.CreateRmAttributeValue(RmAttributeName)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAttributeType(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Microsoft.ResourceManagement.ObjectModel.RmAttributeName.#ctor(System.String)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmFactory.cs" Line="253">Because the behavior of 'RmAttributeName.RmAttributeName(string)' could vary based on the current user's locale settings, replace this call in 'RmFactory.GetAttributeType(string)' with a call to 'RmAttributeName.RmAttributeName(string, CultureInfo)'. If the result of 'RmAttributeName.RmAttributeName(string, CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsMultiValued(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Microsoft.ResourceManagement.ObjectModel.RmAttributeName.#ctor(System.String)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmFactory.cs" Line="153">Because the behavior of 'RmAttributeName.RmAttributeName(string)' could vary based on the current user's locale settings, replace this call in 'RmFactory.IsMultiValued(string)' with a call to 'RmAttributeName.RmAttributeName(string, CultureInfo)'. If the result of 'RmAttributeName.RmAttributeName(string, CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsReference(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Microsoft.ResourceManagement.ObjectModel.RmAttributeName.#ctor(System.String)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmFactory.cs" Line="185">Because the behavior of 'RmAttributeName.RmAttributeName(string)' could vary based on the current user's locale settings, replace this call in 'RmFactory.IsReference(string)' with a call to 'RmAttributeName.RmAttributeName(string, CultureInfo)'. If the result of 'RmAttributeName.RmAttributeName(string, CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsRequired(System.String,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Microsoft.ResourceManagement.ObjectModel.RmAttributeName.#ctor(System.String)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmFactory.cs" Line="214">Because the behavior of 'RmAttributeName.RmAttributeName(string)' could vary based on the current user's locale settings, replace this call in 'RmFactory.IsRequired(string, string)' with a call to 'RmAttributeName.RmAttributeName(string, CultureInfo)'. If the result of 'RmAttributeName.RmAttributeName(string, CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RmAttributeCache" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RmFactory.RmAttributeCache' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rm' in member name 'RmFactory.RmAttributeCache' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RmDoc" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RmFactory.RmDoc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rm' in member name 'RmFactory.RmDoc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error">Modify member 'RmFactory.RmDoc' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RmNamespace" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Rm" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Rm' in member name 'RmFactory.RmNamespace' by changing it to 'RM'.</Issue>
            </Message>
            <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rm' in member name 'RmFactory.RmNamespace' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RmNsManager" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RmFactory.RmNsManager' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rm' in member name 'RmFactory.RmNsManager' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RmObjectCache" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RmFactory.RmObjectCache' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'RmFactory.RmObjectCache' doesn't nest generic type 'Dictionary&lt;string, Dictionary&lt;RmAttributeName, RmFactory.RmAttributeInfo&gt;&gt;'.</Issue>
            </Message>
            <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rm' in member name 'RmFactory.RmObjectCache' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RmSchema" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RmFactory.RmSchema' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rm' in member name 'RmFactory.RmSchema' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RmFactory+RmAttributeInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Rm" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Rm' in type name 'RmFactory.RmAttributeInfo' by changing it to 'RM'.</Issue>
          </Message>
          <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rm' in type name 'RmFactory.RmAttributeInfo'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'RmFactory.RmAttributeInfo'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AttributeType" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RmFactory.RmAttributeInfo.AttributeType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsMultiValue" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RmFactory.RmAttributeInfo.IsMultiValue' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in member name 'RmFactory.RmAttributeInfo.IsMultiValue' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsRequired" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RmFactory.RmAttributeInfo.IsRequired' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RmFactory+RmAttributeType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Rm" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Rm' in type name 'RmFactory.RmAttributeType' by changing it to 'RM'.</Issue>
          </Message>
          <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rm' in type name 'RmFactory.RmAttributeType'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="RmRequestFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Rm" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Rm' in type name 'RmRequestFactory' by changing it to 'RM'.</Issue>
          </Message>
          <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rm' in type name 'RmRequestFactory'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Xml.Schema.XmlSchemaSet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmRequestFactory.cs" Line="39">In method 'RmRequestFactory.RmRequestFactory(XmlSchemaSet)', correct the spelling of 'rm' in parameter name 'rmSchema' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildDirectoryAccessChange(Microsoft.ResourceManagement.ObjectModel.RmAttributeName,System.IComparable)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmRequestFactory.cs" Line="212">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'RmRequestFactory.BuildDirectoryAccessChange(RmAttributeName, IComparable)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateEnumeration(Microsoft.ResourceManagement.Client.WsEnumeration.WsEnumerationClient,Microsoft.ResourceManagement.Client.RmResourceFactory,System.String,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmRequestFactory.cs" Line="192">In method 'RmRequestFactory.CreateEnumeration(WsEnumerationClient, RmResourceFactory, string, string[])', call System.IDisposable.Dispose on object 'new EnumerationResultEnumerator(client, factory, filter, attributes)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateGetRequest(Microsoft.ResourceManagement.ObjectModel.RmReference,System.Globalization.CultureInfo,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmRequestFactory.cs" Line="174">In externally visible method 'RmRequestFactory.CreateGetRequest(RmReference, CultureInfo, string[])', validate parameter 'objectId' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreatePutRequest(Microsoft.ResourceManagement.ObjectModel.RmResourceChanges)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ObjectID" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmRequestFactory.cs" Line="78">Correct the spelling of the unrecognized token 'ObjectID' in the literal '"The rmObject does not have an ObjectID."'.</Issue>
            </Message>
            <Message Id="rmObject" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmRequestFactory.cs" Line="78">Correct the spelling of the unrecognized token 'rmObject' in the literal '"The rmObject does not have an ObjectID."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmRequestFactory.cs" Line="75">Correct the spelling of the unrecognized token 'rmObject' in the literal '"transaction does not have rmObject"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RmResourceFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Rm" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Rm' in type name 'RmResourceFactory' by changing it to 'RM'.</Issue>
          </Message>
          <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rm' in type name 'RmResourceFactory'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Xml.Schema.XmlSchemaSet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmResourceFactory.cs" Line="22">In method 'RmResourceFactory.RmResourceFactory(XmlSchemaSet)', correct the spelling of 'rm' in parameter name 'rmSchema' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Xml.Schema.XmlSchemaSet,Microsoft.ResourceManagement.Client.IResourceTypeFactory)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmResourceFactory.cs" Line="27">In method 'RmResourceFactory.RmResourceFactory(XmlSchemaSet, IResourceTypeFactory)', correct the spelling of 'rm' in parameter name 'rmSchema' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConstructAttributeValue(Microsoft.ResourceManagement.ObjectModel.RmAttributeName,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.DateTime.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmResourceFactory.cs" Line="181">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'RmResourceFactory.ConstructAttributeValue(RmAttributeName, string)' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmResourceFactory.cs" Line="183">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'RmResourceFactory.ConstructAttributeValue(RmAttributeName, string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmResourceFactory.cs" Line="202">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'RmResourceFactory.ConstructAttributeValue(RmAttributeName, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmResourceFactory.cs" Line="194">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'RmResourceFactory.ConstructAttributeValue(RmAttributeName, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmResourceFactory.cs" Line="169">In externally visible method 'RmResourceFactory.ConstructAttributeValue(RmAttributeName, string)', validate parameter 'attributeName' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateResource(Microsoft.ResourceManagement.Client.WsEnumeration.PullResponse)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmResourceFactory.cs" Line="109">Change 'List&lt;RmResource&gt;' in 'RmResourceFactory.CreateResource(PullResponse)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="Microsoft.ResourceManagement.ObjectModel.RmAttributeName.#ctor(System.String)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmResourceFactory.cs" Line="139">Because the behavior of 'RmAttributeName.RmAttributeName(string)' could vary based on the current user's locale settings, replace this call in 'RmResourceFactory.CreateResource(PullResponse)' with a call to 'RmAttributeName.RmAttributeName(string, CultureInfo)'. If the result of 'RmAttributeName.RmAttributeName(string, CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateResource(Microsoft.ResourceManagement.Client.WsTransfer.GetResponse)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmResourceFactory.cs" Line="43">Method 'RmResourceFactory.CreateResource(GetResponse)' passes 'getResponse.BaseObjectSearchResponse' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message Id="Microsoft.ResourceManagement.ObjectModel.RmAttributeName.#ctor(System.String)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmResourceFactory.cs" Line="77">Because the behavior of 'RmAttributeName.RmAttributeName(string)' could vary based on the current user's locale settings, replace this call in 'RmResourceFactory.CreateResource(GetResponse)' with a call to 'RmAttributeName.RmAttributeName(string, CultureInfo)'. If the result of 'RmAttributeName.RmAttributeName(string, CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResourceTypeFactory" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_ResourceTypeFactory(Microsoft.ResourceManagement.Client.IResourceTypeFactory)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client" File="RmResourceFactory.cs" Line="219">Method 'RmResourceFactory.ResourceTypeFactory.set(IResourceTypeFactory)' passes 'ResourceTypeFactory' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Microsoft.ResourceManagement.Client.Faults">
       <Types>
        <Type Name="AnonymousInteractionRequiredFault" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AnonymousInteractionEndpointAddress" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_AnonymousInteractionEndpointAddress()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\Faults" File="AnonymousInteractionRequiredFault.cs" Line="39">'AnonymousInteractionRequiredFault.AnonymousInteractionEndpointAddress.get()' creates an exception of type 'Exception', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\Faults" File="AnonymousInteractionRequiredFault.cs" Line="43">'AnonymousInteractionRequiredFault.AnonymousInteractionEndpointAddress.get()' creates an exception of type 'Exception', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\Faults" File="AnonymousInteractionRequiredFault.cs" Line="39">'AnonymousInteractionRequiredFault.AnonymousInteractionEndpointAddress.get()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\Faults" File="AnonymousInteractionRequiredFault.cs" Line="43">'AnonymousInteractionRequiredFault.AnonymousInteractionEndpointAddress.get()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="AnonymousInteractionRequiredFault" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\Faults" File="AnonymousInteractionRequiredFault.cs" Line="43">Correct the spelling of the unrecognized token 'AnonymousInteractionRequiredFault' in the literal '"Could not deserialize EndpointAddresses in AnonymousInteractionRequiredFault."'.</Issue>
               <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\Faults" File="AnonymousInteractionRequiredFault.cs" Line="39">Correct the spelling of the unrecognized token 'AnonymousInteractionRequiredFault' in the literal '"Could not deserialize InteractiveWorkflowAddress in AnonymousInteractionRequired..."'.</Issue>
              </Message>
              <Message Id="EndpointAddresses" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\Faults" File="AnonymousInteractionRequiredFault.cs" Line="43">Correct the spelling of the unrecognized token 'EndpointAddresses' in the literal '"Could not deserialize EndpointAddresses in AnonymousInteractionRequiredFault."'.</Issue>
              </Message>
              <Message Id="InteractiveWorkflowAddress" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\Faults" File="AnonymousInteractionRequiredFault.cs" Line="39">Correct the spelling of the unrecognized token 'InteractiveWorkflowAddress' in the literal '"Could not deserialize InteractiveWorkflowAddress in AnonymousInteractionRequired..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="AnonymousInteractionRequiredFault+EndpointAddressesCollection" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'AnonymousInteractionRequiredFault.EndpointAddressesCollection' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="AnonymousInteractionRequiredFault+InteractiveWorkflowAddress" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'AnonymousInteractionRequiredFault.InteractiveWorkflowAddress' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#InstanceId" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'AnonymousInteractionRequiredFault.InteractiveWorkflowAddress.InstanceId' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AuthenticationRequiredFault" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ContextIdentifier" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AuthenticationRequiredFault.ContextIdentifier' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SecurityTokenServiceAddress" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AuthenticationRequiredFault.SecurityTokenServiceAddress' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UserLockedOut" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AuthenticationRequiredFault.UserLockedOut' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UserRegistered" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AuthenticationRequiredFault.UserRegistered' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AuthorizationRequiredFault" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EndpointReference" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AuthorizationRequiredFault.EndpointReference' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PermissionDeniedFault" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EndpointReference" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PermissionDeniedFault.EndpointReference' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Microsoft.ResourceManagement.Client.WsEnumeration">
       <Types>
        <Type Name="EnumerateResponse" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EnumerationDetail" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerateResponse.EnumerationDetail' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnumerationContext" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Count" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationContext.Count' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CurrentIndex" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationContext.CurrentIndex' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnumerationDirection" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationContext.EnumerationDirection' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Expires" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationContext.Expires' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Filter" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationContext.Filter' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LocalePreferences" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationContext.LocalePreferences' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Sorting" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationContext.Sorting' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Time" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationContext.Time' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnumerationDetail" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Count" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationDetail.Count' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnumerationFilter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dialect" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationFilter.Dialect' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Filter" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationFilter.Filter' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnumerationRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Filter" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationRequest.Filter' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LocalePreferences" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationRequest.LocalePreferences' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MaxCharacters" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationRequest.MaxCharacters' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MaxElements" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationRequest.MaxElements' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Selection" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationRequest.Selection' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'EnumerationRequest.Selection' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Sorting" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationRequest.Sorting' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Time" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EnumerationRequest.Time' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LocalePreference" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Locale" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'LocalePreference.Locale' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PreferenceValue" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'LocalePreference.PreferenceValue' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LocalePreferences" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LocalePreference" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsEnumeration" File="LocalePreferences.cs" Line="12">Change 'LocalePreferences.LocalePreference' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsEnumeration" File="LocalePreferences.cs" Line="12">Change 'List&lt;LocalePreference&gt;' in 'LocalePreferences.LocalePreference' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PullAdjustment" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EnumerationDirection" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PullAdjustment.EnumerationDirection' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StartingIndex" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PullAdjustment.StartingIndex' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PullItem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Values" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PullItem.Values' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;XmlNode&gt;' in 'PullItem.Values' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PullRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EnumerationContext" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PullRequest.EnumerationContext' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MaxCharacters" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PullRequest.MaxCharacters' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MaxElements" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PullRequest.MaxElements' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PullAdjustment" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PullRequest.PullAdjustment' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PullResponse" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EndOfSequence" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PullResponse.EndOfSequence' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnumerationContext" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PullResponse.EnumerationContext' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Items" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PullResponse.Items' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Selection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#string" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsEnumeration" File="Selection.cs" Line="14">Change 'Selection.string' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsEnumeration" File="Selection.cs" Line="14">Change 'List&lt;string&gt;' in 'Selection.string' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="string" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsEnumeration" File="Selection.cs" Line="14">Correct the casing of 'string' in member name 'Selection.string' by changing it to 'String'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Sorting" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dialect" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Sorting.Dialect' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SortingAttribute" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsEnumeration" File="Sorting.cs" Line="20">Change 'Sorting.SortingAttribute' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsEnumeration" File="Sorting.cs" Line="20">Change 'List&lt;SortingAttribute&gt;' in 'Sorting.SortingAttribute' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SortingAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'SortingAttribute' so that it does not end in 'Attribute'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Ascending" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SortingAttribute.Ascending' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Value" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SortingAttribute.Value' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WsEnumerationClient" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ws" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Ws' in type name 'WsEnumerationClient' by changing it to 'WS'.</Issue>
          </Message>
          <Message Id="Ws" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ws' in type name 'WsEnumerationClient'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Enumerate(Microsoft.ResourceManagement.Client.WsEnumeration.EnumerationRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsEnumeration" File="WsEnumerationClient.cs" Line="43">In method 'WsEnumerationClient.Enumerate(EnumerationRequest)', call System.IDisposable.Dispose on object 'enumerateRequest' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Pull(Microsoft.ResourceManagement.Client.WsEnumeration.PullRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsEnumeration" File="WsEnumerationClient.cs" Line="76">In method 'WsEnumerationClient.Pull(PullRequest)', call System.IDisposable.Dispose on object 'pullRequest' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="EnumerationContext" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsEnumeration" File="WsEnumerationClient.cs" Line="72">Correct the spelling of the unrecognized token 'EnumerationContext' in the literal '"EnumerationContext must be set in order to call Pull"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Microsoft.ResourceManagement.Client.WsTransfer">
       <Types>
        <Type Name="AddRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AttributeTypeAndValues" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AddRequest.cs" Line="29">Change 'AddRequest.AttributeTypeAndValues' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AddRequest.cs" Line="29">Change 'List&lt;DirectoryAccessChange&gt;' in 'AddRequest.AttributeTypeAndValues' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AlternateClient" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Delete(Microsoft.ResourceManagement.Client.WsTransfer.DeleteRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AlternateClient.cs" Line="244">In method 'AlternateClient.Delete(DeleteRequest)', call System.IDisposable.Dispose on object 'deleteRequest' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AlternateClient.cs" Line="239">Method 'AlternateClient.Delete(DeleteRequest)' passes 'ResourceReferenceProperty' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(Microsoft.ResourceManagement.Client.WsTransfer.GetRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AlternateClient.cs" Line="63">In method 'AlternateClient.Get(GetRequest)', call System.IDisposable.Dispose on object 'getRequest' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AlternateClient.cs" Line="68">In method 'AlternateClient.Get(GetRequest)', call System.IDisposable.Dispose on object 'getRequest' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Put(Microsoft.ResourceManagement.Client.WsTransfer.PutRequest,Microsoft.ResourceManagement.Client.WsTransfer.PutResponse&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AlternateClient.cs" Line="167">Consider a design that does not require that 'response' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Put(Microsoft.ResourceManagement.Client.WsTransfer.PutRequest,Microsoft.ResourceManagement.Client.WsTransfer.PutResponse&amp;,System.IdentityModel.Tokens.SecurityToken)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AlternateClient.cs" Line="174">Consider a design that does not require that 'response' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Put(Microsoft.ResourceManagement.Client.WsTransfer.PutRequest,Microsoft.ResourceManagement.Client.WsTransfer.PutResponse&amp;,System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Channels.ContextMessageProperty)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AlternateClient.cs" Line="179">Consider a design that does not require that 'response' be an out parameter.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AlternateClient.cs" Line="197">In method 'AlternateClient.Put(PutRequest, out PutResponse, SecurityToken, ContextMessageProperty)', call System.IDisposable.Dispose on object 'putRequest' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AlternateClient.cs" Line="186">Method 'AlternateClient.Put(PutRequest, out PutResponse, SecurityToken, ContextMessageProperty)' passes 'ModifyRequest' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AlternateClient.cs" Line="190">Method 'AlternateClient.Put(PutRequest, out PutResponse, SecurityToken, ContextMessageProperty)' passes 'ResourceReferenceProperty' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Put(Microsoft.ResourceManagement.Client.WsTransfer.PutRequest,System.IdentityModel.Tokens.SamlSecurityToken)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AlternateClient.cs" Line="156">Consider changing the type of parameter 'token' in 'AlternateClient.Put(PutRequest, SamlSecurityToken)' from 'SamlSecurityToken' to its base type 'SecurityToken'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Put(System.ServiceModel.Channels.Message,System.IdentityModel.Tokens.SecurityToken)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="AlternateClient.cs" Line="125">In method 'AlternateClient.Put(Message, SecurityToken)', call System.IDisposable.Dispose on object 'client' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BaseObjectSearchRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AttributeTypes" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BaseObjectSearchRequest.AttributeTypes' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'BaseObjectSearchRequest.AttributeTypes' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dialect" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BaseObjectSearchRequest.Dialect' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BaseObjectSearchResponse" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PartialAttributes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="BaseObjectSearchResponse.cs" Line="14">Change 'BaseObjectSearchResponse.PartialAttributes' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="BaseObjectSearchResponse.cs" Line="14">Change 'List&lt;PartialAttributeType&gt;' in 'BaseObjectSearchResponse.PartialAttributes' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CreateRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddRequest" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CreateRequest.AddRequest' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CreateResponse" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ResourceCreated" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CreateResponse.ResourceCreated' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EndpointReference" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Address" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EndpointReference.Address' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReferenceProperties" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'EndpointReference.ReferenceProperties' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GetRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BaseObjectSearchRequest" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'GetRequest.BaseObjectSearchRequest' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GetResponse" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BaseObjectSearchResponse" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'GetResponse.BaseObjectSearchResponse' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ImdaRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Imda" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Imda' in type name 'ImdaRequest'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="MexClient" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Mex" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Mex' in type name 'MexClient'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#BeginGet(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="MexClient.cs" Line="32">The 'this' parameter (or 'Me' in Visual Basic) of 'MexClient.BeginGet(Message, AsyncCallback, object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="callback" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="MexClient.cs" Line="32">Parameter 'callback' of 'MexClient.BeginGet(Message, AsyncCallback, object)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="request" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="MexClient.cs" Line="32">Parameter 'request' of 'MexClient.BeginGet(Message, AsyncCallback, object)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="state" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="MexClient.cs" Line="32">Parameter 'state' of 'MexClient.BeginGet(Message, AsyncCallback, object)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EndGet(System.IAsyncResult)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="MexClient.cs" Line="36">The 'this' parameter (or 'Me' in Visual Basic) of 'MexClient.EndGet(IAsyncResult)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="result" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="MexClient.cs" Line="36">Parameter 'result' of 'MexClient.EndGet(IAsyncResult)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="MexClient.cs" Line="46">In method 'MexClient.Get()', call System.IDisposable.Dispose on object 'getRequest' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ModifyRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Changes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="ModifyRequest.cs" Line="28">Change 'ModifyRequest.Changes' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="ModifyRequest.cs" Line="28">Change 'List&lt;DirectoryAccessChange&gt;' in 'ModifyRequest.Changes' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PartialAttributeType" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Values" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PartialAttributeType.Values' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;XmlNode&gt;' in 'PartialAttributeType.Values' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PutRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ModifyRequest" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'PutRequest.ModifyRequest' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReferenceProperties" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ResourceReferenceProperty" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReferenceProperties.ResourceReferenceProperty' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ResourceCreated" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EndpointReference" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ResourceCreated.EndpointReference' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ResourceLocaleProperty" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Value" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Value(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
               <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="ResourceLocaleProperty.cs" Line="19">'value', a parameter declared in 'ResourceLocaleProperty.Value.set(string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ResourceReferenceProperty" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Value" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Value(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
               <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="ResourceReferenceProperty.cs" Line="19">'value', a parameter declared in 'ResourceReferenceProperty.Value.set(string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ResourceTimeProperty" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Value" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Value()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.DateTime.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="ResourceTimeProperty.cs" Line="18">Because the behavior of 'DateTime.ToString()' could vary based on the current user's locale settings, replace this call in 'ResourceTimeProperty.Value.get()' with a call to 'DateTime.ToString(IFormatProvider)'. If the result of 'DateTime.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Value(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.DateTime.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="ResourceTimeProperty.cs" Line="23">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ResourceTimeProperty.Value.set(string)' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="value" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
               <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="ResourceTimeProperty.cs" Line="20">'value', a parameter declared in 'ResourceTimeProperty.Value.set(string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RmAttributeElement" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Rm" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Rm' in type name 'RmAttributeElement' by changing it to 'RM'.</Issue>
          </Message>
          <Message Id="Rm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rm' in type name 'RmAttributeElement'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#IsNull" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_IsNull(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
               <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="RmAttributeElement.cs" Line="25">'value', a parameter declared in 'RmAttributeElement.IsNull.set(bool)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#PermissionHints" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_PermissionHints(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
               <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="RmAttributeElement.cs" Line="15">'value', a parameter declared in 'RmAttributeElement.PermissionHints.set(string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Value" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Value(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
               <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="RmAttributeElement.cs" Line="35">'value', a parameter declared in 'RmAttributeElement.Value.set(string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="TransferRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ResourceLocaleProperty" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'TransferRequest.ResourceLocaleProperty' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResourceReferenceProperty" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'TransferRequest.ResourceReferenceProperty' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResourceTimeProperty" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'TransferRequest.ResourceTimeProperty' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WsTransferClient" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ws" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Ws' in type name 'WsTransferClient' by changing it to 'WS'.</Issue>
          </Message>
          <Message Id="Ws" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ws' in type name 'WsTransferClient'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Delete(Microsoft.ResourceManagement.Client.WsTransfer.DeleteRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferClient.cs" Line="187">In method 'WsTransferClient.Delete(DeleteRequest)', call System.IDisposable.Dispose on object 'deleteRequest' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferClient.cs" Line="182">Method 'WsTransferClient.Delete(DeleteRequest)' passes 'ResourceReferenceProperty' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(Microsoft.ResourceManagement.Client.WsTransfer.GetRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferClient.cs" Line="56">In method 'WsTransferClient.Get(GetRequest)', call System.IDisposable.Dispose on object 'getRequest' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferClient.cs" Line="61">In method 'WsTransferClient.Get(GetRequest)', call System.IDisposable.Dispose on object 'getRequest' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Put(Microsoft.ResourceManagement.Client.WsTransfer.PutRequest,Microsoft.ResourceManagement.Client.WsTransfer.PutResponse&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferClient.cs" Line="136">Consider a design that does not require that 'response' be an out parameter.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferClient.cs" Line="153">In method 'WsTransferClient.Put(PutRequest, out PutResponse)', call System.IDisposable.Dispose on object 'putRequest' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferClient.cs" Line="143">Method 'WsTransferClient.Put(PutRequest, out PutResponse)' passes 'ModifyRequest' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferClient.cs" Line="147">Method 'WsTransferClient.Put(PutRequest, out PutResponse)' passes 'ResourceReferenceProperty' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WsTransferFactoryClient" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ws" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Ws' in type name 'WsTransferFactoryClient' by changing it to 'WS'.</Issue>
          </Message>
          <Message Id="Ws" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ws' in type name 'WsTransferFactoryClient'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Approve(Microsoft.ResourceManagement.ObjectModel.ResourceTypes.RmApproval,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferFactoryClient.cs" Line="98">In method 'WsTransferFactoryClient.Approve(RmApproval, bool)', call System.IDisposable.Dispose on object 'requestMessage' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="responseMessage" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferFactoryClient.cs" Line="109">'WsTransferFactoryClient.Approve(RmApproval, bool)' declares a variable, 'responseMessage', of type 'Message', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferFactoryClient.cs" Line="85">In externally visible method 'WsTransferFactoryClient.Approve(RmApproval, bool)', validate parameter 'approval' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Create(Microsoft.ResourceManagement.Client.WsTransfer.CreateRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferFactoryClient.cs" Line="41">In method 'WsTransferFactoryClient.Create(CreateRequest)', call System.IDisposable.Dispose on object 'createRequest' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTransfer" File="WsTransferFactoryClient.cs" Line="37">Method 'WsTransferFactoryClient.Create(CreateRequest)' passes 'AddRequest' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Microsoft.ResourceManagement.Client.WsTrust">
       <Types>
        <Type Name="AuthenticationChallenge" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#challenge" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AuthenticationChallenge.challenge' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AuthenticationChallengeResponse" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#response" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AuthenticationChallengeResponse.response' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Challenge" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#workflowAuthChallenge" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Challenge.workflowAuthChallenge' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Auth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Auth' in member name 'Challenge.workflowAuthChallenge' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ChallengeResponseHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BuildResponseData(System.Collections.Generic.Dictionary`2&lt;System.Int32,System.String&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="responseStringEncoded" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="ChallengeResponseHelper.cs" Line="19">'ChallengeResponseHelper.BuildResponseData(Dictionary&lt;int, string&gt;)' declares a variable, 'responseStringEncoded', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="ChallengeResponseHelper.cs" Line="22">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ChallengeResponseHelper.BuildResponseData(Dictionary&lt;int, string&gt;)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="ChallengeResponseHelper.cs" Line="20">In externally visible method 'ChallengeResponseHelper.BuildResponseData(Dictionary&lt;int, string&gt;)', validate parameter 'answers' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConvertBase64StringToString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="ChallengeResponseHelper.cs" Line="12">In member 'ChallengeResponseHelper.ConvertBase64StringToString(string)', consider replacing the data type identifier 'String' in parameter name 'base64String' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Normalize(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="ChallengeResponseHelper.cs" Line="32">In method 'ChallengeResponseHelper.Normalize(string)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="ChallengeResponseHelper.cs" Line="32">In externally visible method 'ChallengeResponseHelper.Normalize(string)', validate parameter 'answer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#sha256encrypt(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="ChallengeResponseHelper.cs" Line="44">In method 'ChallengeResponseHelper.sha256encrypt(string)', call System.IDisposable.Dispose on object 'sha256hasher' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="encrypt" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="ChallengeResponseHelper.cs" Line="42">Correct the casing of 'encrypt' in member name 'ChallengeResponseHelper.sha256encrypt(string)' by changing it to 'Encrypt'.</Issue>
            </Message>
            <Message Id="sha" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="ChallengeResponseHelper.cs" Line="42">Correct the casing of 'sha' in member name 'ChallengeResponseHelper.sha256encrypt(string)' by changing it to 'Sha'.</Issue>
            </Message>
            <Message Id="sha" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="ChallengeResponseHelper.cs" Line="42">Correct the spelling of 'sha' in member name 'ChallengeResponseHelper.sha256encrypt(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StringToByte(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="ChallengeResponseHelper.cs" Line="36">In method 'ChallengeResponseHelper.StringToByte(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="QAGateData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GateQuestions" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="QAGateData.cs" Line="25">Change 'QAGateData.GateQuestions' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="QAGateSettings" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#encodedGateSettings" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="encoded" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="QAGateSettings.cs" Line="58">Correct the casing of 'encoded' in member name 'QAGateSettings.encodedGateSettings' by changing it to 'Encoded'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#settingsArray" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_settingsArray()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Convert.ToInt16(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="QAGateSettings.cs" Line="21">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'QAGateSettings.settingsArray.get()' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RequestSecurityTokenResponse" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Authchallenge" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RequestSecurityTokenResponse.Authchallenge' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Authchallenge" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Authchallenge' in member name 'RequestSecurityTokenResponse.Authchallenge' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AuthChallengeResponse" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RequestSecurityTokenResponse.AuthChallengeResponse' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Auth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Auth' in member name 'RequestSecurityTokenResponse.AuthChallengeResponse' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Context" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RequestSecurityTokenResponse.Context' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetContextTokenFromResponse(System.ServiceModel.Channels.ContextMessageProperty)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="RequestSecurityTokenResponse.cs" Line="70">In method 'RequestSecurityTokenResponse.GetContextTokenFromResponse(ContextMessageProperty)', call System.IDisposable.Dispose on object 'new XmlNodeReader(this.RequestedAttachedReference)' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="RequestSecurityTokenResponse.cs" Line="64">In method 'RequestSecurityTokenResponse.GetContextTokenFromResponse(ContextMessageProperty)', call System.IDisposable.Dispose on object 'new XmlNodeReader(this.RequestedProofToken)' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="RequestSecurityTokenResponse.cs" Line="49">In method 'RequestSecurityTokenResponse.GetContextTokenFromResponse(ContextMessageProperty)', call System.IDisposable.Dispose on object 'new XmlNodeReader(this.RequestedSecurityToken)' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="RequestSecurityTokenResponse.cs" Line="68">In method 'RequestSecurityTokenResponse.GetContextTokenFromResponse(ContextMessageProperty)', call System.IDisposable.Dispose on object 'new XmlNodeReader(this.RequestedUnattachedReference)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.DateTime.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="RequestSecurityTokenResponse.cs" Line="53">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'RequestSecurityTokenResponse.GetContextTokenFromResponse(ContextMessageProperty)' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="RequestSecurityTokenResponse.cs" Line="58">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'RequestSecurityTokenResponse.GetContextTokenFromResponse(ContextMessageProperty)' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OtherElements" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RequestSecurityTokenResponse.OtherElements' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RequestedAttachedReference" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RequestSecurityTokenResponse.RequestedAttachedReference' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error">Modify member 'RequestSecurityTokenResponse.RequestedAttachedReference' so that it no longer exposes the concrete type 'XmlElement'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RequestedProofToken" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RequestSecurityTokenResponse.RequestedProofToken' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error">Modify member 'RequestSecurityTokenResponse.RequestedProofToken' so that it no longer exposes the concrete type 'XmlElement'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RequestedSecurityToken" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RequestSecurityTokenResponse.RequestedSecurityToken' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error">Modify member 'RequestSecurityTokenResponse.RequestedSecurityToken' so that it no longer exposes the concrete type 'XmlElement'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RequestedUnattachedReference" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RequestSecurityTokenResponse.RequestedUnattachedReference' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error">Modify member 'RequestSecurityTokenResponse.RequestedUnattachedReference' so that it no longer exposes the concrete type 'XmlElement'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TokenType" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RequestSecurityTokenResponse.TokenType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Response" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#workflowAuthenticationResponse" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Response.workflowAuthenticationResponse' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TokenAndClientCredentials+TokenAndClientCredentialsSecurityTokenManager" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="ClientMultipleTokenBindings.cs" Line="80">In externally visible method 'TokenAndClientCredentials.TokenAndClientCredentialsSecurityTokenManager.CreateSecurityTokenProvider(SecurityTokenRequirement)', validate parameter 'tokenRequirement' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WorkflowAuthenticationChallenge" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ActivityGuid" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'WorkflowAuthenticationChallenge.ActivityGuid' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#data" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="data" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="WorkflowAuthenticationChallenge.cs" Line="32">Correct the casing of 'data' in member name 'WorkflowAuthenticationChallenge.data' by changing it to 'Data'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GateQuestions" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="WorkflowAuthenticationChallenge.cs" Line="69">Change 'WorkflowAuthenticationChallenge.GateQuestions' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#hash" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="hash" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="WorkflowAuthenticationChallenge.cs" Line="44">Correct the casing of 'hash' in member name 'WorkflowAuthenticationChallenge.hash' by changing it to 'Hash'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'WorkflowAuthenticationChallenge.Name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#settings" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="settings" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="WorkflowAuthenticationChallenge.cs" Line="20">Correct the casing of 'settings' in member name 'WorkflowAuthenticationChallenge.settings' by changing it to 'Settings'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WorkflowAuthenticationResponse" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#data" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="data" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="WorkflowAuthenticationResponse.cs" Line="18">Correct the casing of 'data' in member name 'WorkflowAuthenticationResponse.data' by changing it to 'Data'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WsTrust" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ws" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Ws' in type name 'WsTrust' by changing it to 'WS'.</Issue>
          </Message>
          <Message Id="Ws" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ws' in type name 'WsTrust'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'WsTrust' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
          <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">The type name 'WsTrust' conflicts in whole or in part with the namespace name 'Microsoft.ResourceManagement.Client.WsTrust'. Change either name to eliminate the conflict.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#RequestFIMSTSToken(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FIMSTS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-09-04 15:04:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Sourcevizzada1\MassiveManagerChange\MassiveManagerChange\Microsoft.ResourceManagement.Client\WsTrust" File="WsTrust.cs" Line="15">Correct the casing of 'FIMSTS' in member name 'WsTrust.RequestFIMSTSToken(string, string)' by changing it to 'Fimsts'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Resolution Name="Default">{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182212.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
   <Name>Avoid out parameters</Name>
   <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be an out parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182131.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182265.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>Disposable fields should be disposed</Name>
   <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
   <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182328.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
   <Name>Do not raise exceptions in unexpected locations</Name>
   <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
   <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386039.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
   <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182247.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="namingrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
   <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="IncorrectParameterName">Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059">
   <Name>Members should not expose certain concrete types</Name>
   <Description>Members should not expose certain concrete types.</Description>
   <Resolution Name="Xml">Modify member {0} so that it no longer exposes the concrete type {1}. Use IXPathNavigable to represent XML data sources.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182160.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182162.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308">
   <Name>Normalize strings to uppercase</Name>
   <Description>Strings should be normalized to upper-case.</Description>
   <Resolution Name="ToUpperInvariant">In method {0}, replace the call to {1} with String.ToUpperInvariant().</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/0fss9skc.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182278.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052">
   <Name>Static holder types should be sealed</Name>
   <Description>Static holder types do not provide functionality that derived instances can extend. Inheriting from such a type indicates a flawed design.</Description>
   <Resolution Name="Default">Because type {0} contains only 'static' ('Shared' in Visual Basic) members, mark it as 'sealed' ('NotInheritable' in Visual Basic) to prevent consumers from inheriting from it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182168.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="Default">Because type {0} contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724">
   <Name>Type names should not match namespaces</Name>
   <Description>Identifiers which conflict in whole or in part with namespace names should be avoided. Names that describe the purpose or contents of a type are preferred.</Description>
   <Resolution Name="Default">The type name {0} conflicts in whole or in part with the namespace name '{1}'. Change either name to eliminate the conflict.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182257.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Resolution Name="Reassigned">In externally visible method {0}, validate local variable '{1}', which was reassigned from parameter '{2}', before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500">
   <Name>Variable names should not match field names</Name>
   <Description>Instance field and variable names should not be identical within the same scope.</Description>
   <Resolution Name="Parameter">{0}, a parameter declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182216.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="15.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
